name: Test
on:
  push:
    branches:
      - '**'
      - '!gh_pages'
concurrency: 
  group: build-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-ui:
    name: UI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: 'npm'
      - name: install voyager dependencies
        run: (cd source/voyager && npm ci --legacy-peer-deps)
      - name: install ui dependencies
        run: npm ci && (cd source/ui && npm ci)
      - name: build UI
        run: npm run build-ui
      - uses: actions/upload-artifact@v4
        with:
          name: "client"
          path: "dist"
          if-no-files-found: error
          retention-days: 1
  build-server:
    name: Server
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20, 22]
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 1s
          --health-timeout 5s
          --health-retries 5
    env:
      PGHOST: localhost
      PGPORT: 5432
      PGPASSWORD: postgres
      PGUSER: postgres
      PGDATABASE: postgres
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: install
        run: npm ci && (cd source/server && npm ci)
      - name: test
        run: (cd source/server && npm test)
      - name: build
        run:  npm run build-server
      - uses: actions/upload-artifact@v4
        if: matrix.node-version == 22
        with:
          name: "server"
          path: |
            source/server/dist/*
            !source/server/dist/*.test.js
            !source/server/dist/*.test.js.map
            !source/server/dist/__test_fixtures/**
            source/server/package.json
            source/server/package-lock.json
            source/server/migrations/
            source/server/templates/
            source/server/LICENSE.md
          retention-days: 1

  pack:
    name: Pack tarball
    runs-on: ubuntu-latest
    needs: [build-ui, build-server]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: eCorpus
      - name: edit run scripts
        working-directory: eCorpus
        run: |
          mv server/* ./
          rm -r server

      - uses: actions/upload-artifact@v4
        with:
          name: "eCorpus-${{github.ref_name}}"
          path: eCorpus
          if-no-files-found: error
          retention-days: 10
  e2e:
    name: Test End-to-End
    runs-on: ubuntu-latest
    needs: [ pack ]

    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 1s
          --health-timeout 5s
          --health-retries 5
    env:
      PGHOST: localhost
      PGPORT: 5432
      PGPASSWORD: postgres
      PGUSER: postgres
      PGDATABASE: postgres
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            source/e2e
      - uses: actions/download-artifact@v4
        with:
          name: "eCorpus-${{github.ref_name}}"
          path: build
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
      - name: install dependencies
        run: |
          ls
          ls build/*
          npm ci
          (cd build && npm ci --omit=dev)
          (cd source/e2e && npm ci)
          (cd source/e2e && npx playwright install  --with-deps)
      - name: run tests
        working-directory: source/e2e
        env:
          ROOT_DIR: "${{ github.workspace}}/build"
          DIST_DIR: "${{ github.workspace}}/build/client"
        run: npm test

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: source/e2e/playwright-report/
          retention-days: 10
